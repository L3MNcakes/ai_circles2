{"version":3,"sources":["reducers/AppReducer.js","reducers/ConfigReducer.js","reducers/WorldReducer.js","helpers/AgentFactory.js","helpers/AgentBrain.js","helpers/AcademyQueue.js","context/AppContext.js","components/Agent.js","components/Food.js","components/Egg.js","containers/WorldContainer.js","helpers/FoodFactory.js","actions/WorldActions.js","helpers/AgentDecisions.js","containers/ConfigContainer.js","actions/ConfigActions.js","App.js","reportWebVitals.js","index.js"],"names":["AppAction","AppReducer","state","action","type","test","initialState","ConfigAction","ConfigReducer","world","width","payload","height","tickInterval","agents","initNum","radius","minSpeed","maxSpeed","minFoodForEgg","maxFoodForEgg","minLifeSpan","maxLifeSpan","mutationChance","food","spawnEvery","spawnAmount","maxAgents","maxFood","WorldAction","ADD_AGENT","ADD_EGG","ADD_FOOD","EAT_FOOD","FERTILIZE_EGG","LAZY_UPDATE_AGENTS","REMOVE_EGG","REPLACE_AGENTS","RESET","SET_LEARNING","TICK","TOGGLE_RUNNING","UPDATE_AGENT","UPDATE_AGENTS","UPDATE_FOOD","WorldReducer","eggs","foodIndex","indexOf","newFood","slice","targetEgg","agent","eggIndex","parents","newAgentsState","map","updatesToAgent","find","a","id","eggI","replaced","isLearning","tick","isRunning","agentIndex","findIndex","newIds","keepAgents","filter","includes","newState","agentInState","sa","ticksAlive","Boolean","rng","Random","browserCrypto","getRandomPosition","Victor","integer","getRandomFloat","min","max","precision","num","real","pow","Math","round","AvailableAgentAction","FIND_FOOD","WAIT","THINKING","PROCESSING_THOUGHTS","LAY_EGG","WANDER","createModel","network","model","Model","FromNetwork","epochs","stepsPerEpoch","compile","loss","optimizer","createTeacher","academy","addTeacher","lessonsQuantity","lessonLength","lessonsWithRandom","epsilon","epsilonDecay","epsilonMin","gamma","createNewAgentBrain","pTeacher","agentConfig","memorySize","batchSize","temporalWindow","addAgent","createNeuralAgent","assignTeacherToAgent","createDerivedAgentBrain","agentBrain","nAgent","oldAgent","get","newAgent","newModel","name","uuid4","layers","setWeights","getWeights","createNeuralAgentFromModel","teachers","forEach","t","size","currentLessonLength","mapAgentActionToInput","AcademyQueueState","AcademyQueue","this","agentQueue","Set","IsAcademyLearning","agentId","add","teacher","State","worldState","configState","onComplete","onError","nextAgent","values","next","value","delete","attemptedAction","console","log","isAcademyLearning","brain","inputs","config","MAX_AGENTS","MAX_FOOD","agentPosList","agentActionList","agentActionTargetList","agentSpeedList","i","foundAgent","push","position","x","y","targetPosition","speed","foodPosList","worldStateToInputs","step","teacherName","agentsInput","then","output","guessSuccess","guess","addRewardToAgent","isEaten","catch","err","error","AppContext","createContext","AppContextProvider","children","useReducer","configDispatch","useState","Academy","numActions","finalInputShape","NeuralNetwork","InputShape","addNeuralNetworkLayers","units","activation","createNetwork","academyQueue","ctxServices","appReducer","configReducer","worldReducer","neuralAcademy","neuralNetwork","Provider","useAppContext","useContext","Agent","onClick","event","preventDefault","style","opacity","cx","cy","r","fill","color","stroke","isMutant","strokeWidth","numEaten","generation","Food","points","cos","PI","sin","reduce","acc","val","calcPoints","Egg","egg","styles","length","WorldContainer","ctx","backgroundColor","f","e","createAgent","dispatcher","hex","hasLaidEgg","foodForEgg","lifeSpan","createRandomAgent","createFood","worldWidth","worldHeight","createRandomFood","layEgg","fromParent","newEgg","clone","tickEggs","mother","father","mutationMultiplier","inheritColor","bool","mutateColor","newColor","inheritSpeed","mutateSpeed","newSpeed","inheritFoodForEgg","mutateFoodForEgg","newFoodForEgg","inheritLifespan","mutateLifespan","newLifespan","hatchEgg","tickAgentActions","updatedAgents","queueAgent","targetFood","target","distance","diffAngle","subtract","angle","newPosition","findFood","eatFood","fertilizeEgg","fertilizableEggs","agentWait","agentWander","newAgents","newTicksAlive","academyTeacher","academyAgent","removeStudent","tickDeath","process","newAction","tickAcademyQueue","tickFood","ConfigContainer","worldDispatch","setWidth","setHeight","setTickInterval","initAgents","setInitAgents","agentRadius","setAgentRadius","agentMinSpeed","setAgentMinSpeed","agentMaxSpeed","setAgentMaxSpeed","agentMinFoodForEgg","setAgentMinFoodForEgg","agentMaxFoodForEgg","setAgentMaxFoodForEgg","agentMinLifespan","setAgentMinLifespan","agentMaxLifespan","setAgentMaxLifespan","agentMutationChance","setAgentMutationChance","initFood","setInitFood","foodRadius","setFoodRadius","foodSpawnEvery","setFoodSpawnEvery","foodSpawnAmount","setFoodSpawnAmount","rowStyles","itemStyles","margin","className","padding","onChange","dispatchers","updateConfig","parseInt","parseFloat","disabled","App","neuralTeacher","intervalRef","setIntervalRef","lastTick","setLastTick","useEffect","clear","iRef","setInterval","clearInterval","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d03a65aa.chunk.js","sourcesContent":["import { useReducer } from 'react';\n\nexport const AppAction = {\n  TEST: 'test'\n};\n\nconst AppReducer = (state, action) => {\n  switch(action.type) {\n    case AppAction.TEST:\n      return {\n        ...state,\n        test: true\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  test: false,\n};\n\nexport const useAppReducer = () => useReducer(AppReducer, initialState);\n","import { useReducer } from 'react';\n\nexport const ConfigAction = {\n  UPDATE_WORLD: 'UPDATE_WORLD',\n  UPDATE_AGENTS: 'UPDATE_AGENTS',\n  UPDATE_FOOD: 'UPDATE_FOOD',\n};\n\nconst ConfigReducer = (state, action) => {\n  switch(action.type) {\n    case ConfigAction.UPDATE_WORLD:\n      return {\n        ...state,\n        world: {\n          ...state.world,\n          width: action.payload.width,\n          height: action.payload.height,\n          tickInterval: action.payload.tickInterval\n        }\n      };\n    case ConfigAction.UPDATE_AGENTS:\n      return {\n        ...state,\n        agents: {\n          ...state.agents,\n          initNum: action.payload.initNum,\n          radius: action.payload.radius,\n          minSpeed: action.payload.minSpeed,\n          maxSpeed: action.payload.maxSpeed,\n          minFoodForEgg: action.payload.minFoodForEgg,\n          maxFoodForEgg: action.payload.maxFoodForEgg,\n          minLifeSpan: action.payload.minLifeSpan,\n          maxLifeSpan: action.payload.maxLifeSpan,\n          mutationChance: action.payload.mutationChance,\n        }\n      };\n    case ConfigAction.UPDATE_FOOD:\n      return {\n        ...state,\n        food: {\n          ...state.food,\n          initNum: action.payload.initNum,\n          radius: action.payload.radius,\n          spawnEvery: action.payload.spawnEvery,\n          spawnAmount: action.payload.spawnAmount,\n        }\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  world: {\n    width: 800,\n    height: 600,\n    tickInterval: 30 / 1000,\n    maxAgents: 20,\n    maxFood: 40\n  },\n  agents: {\n    initNum: 5,\n    radius: 14,\n    minSpeed: 600,\n    maxSpeed: 1200,\n    minFoodForEgg: 15,\n    maxFoodForEgg: 30,\n    minLifeSpan: 12,\n    maxLifeSpan: 24,\n    mutationChance: 0.07,\n  },\n  food: {\n    initNum: 15,\n    radius: 10,\n    spawnEvery: 750,\n    spawnAmount: 10,\n  }\n};\n\nexport const useConfigReducer = () => useReducer(ConfigReducer, initialState);\n","import { useReducer } from 'react';\n\nexport const WorldAction = {\n  ADD_AGENT: 'ADD_AGENT',\n  ADD_EGG: 'ADD_EGG',\n  ADD_FOOD: 'ADD_FOOD',\n  EAT_FOOD: 'EAT_FOOD',\n  FERTILIZE_EGG: 'FERTILIZE_EGG',\n  LAZY_UPDATE_AGENTS: 'LAZY_UPDATE_AGENTS',\n  REMOVE_EGG: 'REMOVE_EGG',\n  REPLACE_AGENTS: 'REPLACE_AGENTS',\n  RESET: 'RESET',\n  SET_LEARNING: 'LEARNING',\n  TICK: 'TICK',\n  TOGGLE_RUNNING: 'TOGGLE_RUNNING',\n  UPDATE_AGENT: 'UPDATE_AGENT',\n  UPDATE_AGENTS: 'UPDATE_AGENTS',\n  UPDATE_FOOD: 'UPDATE_FOOD',\n};\n\nconst WorldReducer = (state, action) => {\n  switch(action.type) {\n    case WorldAction.ADD_AGENT:\n      return {\n        ...state,\n        agents: [\n          ...state.agents,\n          action.payload\n        ]\n      };\n    case WorldAction.ADD_EGG:\n      return {\n        ...state,\n        eggs: [\n          ...state.eggs,\n          action.payload\n        ]\n      };\n    case WorldAction.ADD_FOOD:\n      return {\n        ...state,\n        food: [\n          ...state.food,\n          action.payload\n        ]\n      };\n    case WorldAction.EAT_FOOD:\n      const foodIndex = state.food.indexOf(action.payload);\n\n      const newFood = [\n        ...state.food.slice(0, foodIndex),\n        ...state.food.slice(foodIndex + 1)\n      ];\n\n      return {\n        ...state,\n        food: newFood\n      };\n    case WorldAction.FERTILIZE_EGG:\n      const { targetEgg, agent } = action.payload;\n      const eggIndex = state.eggs.indexOf(targetEgg);\n\n      return eggIndex !== -1 ? {\n        ...state,\n        eggs: [\n          ...state.eggs.slice(0, eggIndex),\n          {\n            ...state.eggs[eggIndex],\n            parents: [\n              ...state.eggs[eggIndex].parents,\n              { ...agent }\n            ]\n          },\n          ...state.eggs.slice(eggIndex + 1)\n        ]\n      } : state;\n    case WorldAction.LAZY_UPDATE_AGENTS:\n      const newAgentsState = state.agents.map( agent => {\n        const updatesToAgent = action.payload.find( a => a.id === agent.id );\n\n        return updatesToAgent ? {\n          ...agent,\n          ...updatesToAgent\n        } : { ...agent };\n      });\n\n      return {\n        ...state,\n        agents: newAgentsState\n      };\n    case WorldAction.REMOVE_EGG:\n      const eggI = state.eggs.indexOf(action.payload);\n\n      return {\n        ...state,\n        eggs: [\n          ...state.eggs.slice(0, eggI),\n          ...state.eggs.slice(eggI+1)\n        ]\n      };\n    case WorldAction.REPLACE_AGENTS:\n      //console.log('REPLACE_AGENTS', state, action.payload);\n\n      return {\n        ...state,\n        agents: action.payload,\n        replaced: true\n      };\n    case WorldAction.RESET:\n      return {\n        ...initialState\n      };\n    case WorldAction.SET_LEARNING:\n      return {\n        ...state,\n        isLearning: action.payload\n      };\n    case WorldAction.TICK:\n      return {\n        ...state,\n        tick: state.tick + 1\n      };\n    case WorldAction.TOGGLE_RUNNING:\n      return {\n        ...state,\n        isRunning: action.payload ? action.payload : !state.isRunning\n      };\n    case WorldAction.UPDATE_AGENT:\n      const agentIndex = state.agents.findIndex( a => a.id === action.payload.id );\n\n      return agentIndex !== -1 ? {\n        ...state,\n        agents: [\n          ...state.agents.slice(0, agentIndex),\n          action.payload,\n          ...state.agents.slice(agentIndex + 1)\n        ]\n      } : state;\n    case WorldAction.UPDATE_AGENTS:\n      //console.log('UPDATE_AGENTS', state, action.payload);\n      const newIds = action.payload.map( a => a.id );\n      const keepAgents = state.agents.filter( a => !newIds.includes(a.id) );\n      const newState = [ ...keepAgents, ...action.payload ].map( a => {\n        const agentInState = state.agents.find( sa => sa.id === a.id );\n\n        return agentInState ? {\n          ...a,\n          ticksAlive: agentInState.ticksAlive\n        } : null;\n      }).filter(Boolean);\n\n      return {\n        ...state,\n        agents: newState,\n      };\n    case WorldAction.UPDATE_FOOD:\n      return {\n        ...state,\n        food: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  agents: [],\n  eggs: [],\n  food: [],\n  tick: 0,\n  isRunning: false,\n  isLearning: false,\n};\n\nexport const useWorldReducer = () => useReducer(WorldReducer, initialState);\n","import * as Victor from 'victor';\nimport { Random } from 'random-js'\n\nimport { createNewAgentBrain, createDerivedAgentBrain } from './AgentBrain';\n\nconst rng = new Random(Random.browserCrypto);\n\nexport const getRandomPosition = (width, height) => {\n  const PAD = 50;\n\n  return new Victor(\n    rng.integer(PAD, width - PAD),\n    rng.integer(PAD, height - PAD)\n  );\n};\n\nconst getRandomFloat = (min, max, precision) => {\n  const num = rng.real(min, max);\n  const pow = Math.pow(10, precision);\n\n  return Math.round(num * pow) / pow;\n};\n\nexport const AvailableAgentAction = {\n  FIND_FOOD: 'FIND_FOOD',\n  EAT_FOOD: 'EAT_FOOD',\n  WAIT: 'WAIT',\n  THINKING: 'THINKING',\n  PROCESSING_THOUGHTS: 'PROCESSING_THOUGHTS',\n  LAY_EGG: 'LAY_EGG',\n  FERTILIZE_EGG: 'FERTILIZE_EGG',\n  WANDER: 'WANDER',\n};\n\nexport const createRandomAgent = (\n  config,\n  academy,\n  network,\n) => ({\n  id: rng.uuid4(),\n  position: getRandomPosition(config.world.width, config.world.height),\n  color: `#${rng.hex(6)}`,\n  radius: config.agents.radius,\n  speed: rng.integer(config.agents.minSpeed, config.agents.maxSpeed) / 1000,\n  attemptedAction: {\n    type: AvailableAgentAction.WAIT\n  },\n  brain: createNewAgentBrain(academy, network),\n  numEaten: 0,\n  hasLaidEgg: false,\n  ticksAlive: 0,\n  foodForEgg: rng.integer(config.agents.minFoodForEgg, config.agents.maxFoodForEgg),\n  lifeSpan: getRandomFloat(config.agents.minLifeSpan, config.agents.maxLifeSpan, 4),\n  isMutant: false,\n  generation: 0,\n});\n\nexport const createEgg = (\n  fromParent\n) => ({\n  id: rng.uuid4(),\n  position: fromParent.position.clone(),\n  color: fromParent.color,\n  parents: [\n    { ...fromParent }\n  ]\n});\n\nexport const hatchEgg = (\n  egg,\n  config,\n  academy,\n  network\n) => {\n  const [ mother, father ] = egg.parents;\n\n  let mutationMultiplier = 1;\n\n  const inheritColor = rng.bool() ? mother.color : father.color;\n  const mutateColor = rng.bool(Math.pow(config.agents.mutationChance, mutationMultiplier));\n  const newColor = mutateColor ? `#${rng.hex(6)}` : inheritColor;\n\n  if (mutateColor) {\n    mutationMultiplier += 1;\n    console.log('color mutated');\n  }\n\n  const inheritSpeed = rng.bool() ? mother.speed : father.speed;\n  const mutateSpeed = rng.bool(Math.pow(config.agents.mutationChance, mutationMultiplier));\n  const newSpeed = mutateSpeed ?\n    rng.integer(config.agents.minSpeed, config.agents.maxSpeed) / 1000 :\n    inheritSpeed;\n\n  if (mutateSpeed) {\n    mutationMultiplier += 1;\n    console.log('speed mutated');\n  }\n\n  const inheritFoodForEgg = rng.bool() ? mother.foodForEgg : father.foodForEgg;\n  const mutateFoodForEgg = rng.bool(Math.pow(config.agents.mutationChance, mutationMultiplier));\n  const newFoodForEgg = mutateFoodForEgg ?\n    rng.integer(config.agents.minFoodForEgg, config.agents.maxFoodForEgg) :\n    inheritFoodForEgg;\n\n  if (mutateFoodForEgg) {\n    mutationMultiplier += 1;\n    console.log('foodForEgg mutated');\n  }\n\n  const inheritLifespan = rng.bool() ? mother.lifeSpan : father.lifeSpan;\n  const mutateLifespan = rng.bool(Math.pow(config.agents.mutationChance, mutationMultiplier));\n  const newLifespan = mutateLifespan ?\n    getRandomFloat(config.agents.minLifeSpan, config.agents.maxLifeSpan, 4) :\n    inheritLifespan;\n\n  if (mutateLifespan) {\n    mutationMultiplier += 1;\n    console.log('lifespan mutated');\n  }\n\n  const isMutant = mutateColor || mutateSpeed || mutateFoodForEgg || mutateLifespan;\n  const generation = Math.max(mother.generation, father.generation) + 1;\n\n  return {\n    id: rng.uuid4(),\n    position: egg.position.clone(),\n    color: newColor,\n    radius: config.agents.radius,\n    speed: newSpeed,\n    attemptedAction: {\n      type: AvailableAgentAction.WAIT\n    },\n    brain: createDerivedAgentBrain(\n      rng.bool() ? mother.brain : father.brain,\n      academy,\n      network\n    ),\n    numEaten: 0,\n    hasLaidEgg: false,\n    ticksAlive: 0,\n    foodForEgg: newFoodForEgg,\n    lifeSpan: newLifespan,\n    isMutant: isMutant,\n    generation: generation,\n  };\n};\n","import { Model, NeuralNetwork } from 'reimprovejs/dist/reimprove';\nimport { Random } from 'random-js';\n\nimport { AvailableAgentAction } from './AgentFactory';\n\nconst rng = new Random(Random.browserCrypto);\n\nexport const createNetwork = (maxAgents, maxFood) => {\n  const baseInputShape =\n    (2 * maxAgents) +   // Inputs for each Agent's current postion (x,y)\n    (maxAgents) +       // Inputs for each Agent's current action\n    (2 * maxAgents) +   // Inputs for position (x,y) of each Agent's target\n    (maxAgents) +       // Inputs for each Agent's speed\n    (2 * maxFood);      // Inputs for the position of each Food resource\n\n  const numActions = maxFood; // The network outputs a given food index the Agent to should go for\n  const finalInputShape = (2 * baseInputShape) + numActions;\n\n  const network = new NeuralNetwork();\n  network.InputShape = [ finalInputShape ];\n  network.addNeuralNetworkLayers([\n    { type: 'dense', units: 32, activation: 'relu' },\n    { type: 'dense', units: numActions, activation: 'softmax' }\n  ]);\n\n  return network;\n};\n\nexport const createModel = (network) => {\n  const modelFitConfig = {\n    epochs: 1,\n    stepsPerEpoch: 16\n  };\n\n  const model = Model.FromNetwork(network, modelFitConfig);\n  model.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\n\n  return model;\n};\n\nexport const createTeacher = (academy) => {\n  const teacherConfig = {\n    lessonsQuantity: 10000,\n    lessonLength: 100,\n    lessonsWithRandom: 0,\n    epsilon: 1,\n    epsilonDecay: 0.995,\n    epsilonMin: 0.05,\n    gamma: 0.9,\n  };\n\n  const t = academy.addTeacher(teacherConfig);\n  //academy.OnLessonEnded(t, (tc, l) => {\n    //const tcObject = academy.teachers.get(tc);\n    //console.log(tc, 'state1', tcObject.State);\n    //console.log('OnLessonEnded', tc, l);\n  //});\n  //academy.OnLearningLessonEnded(t, (tc) => {\n    //const tcObject = academy.teachers.get(tc);\n    //console.log(tc, 'state2', tcObject.State);\n    //console.log('OnLearningLessonEnded', tc);\n  //});\n\n  //return academy.addTeacher(teacherConfig);\n  return t;\n};\n\nexport const createNeuralAgent = (academy, network) => {\n  const agentConfig = {\n    model: createModel(network),\n    agentConfig: {\n      memorySize: 500,\n      batchSize: 32,\n      temporalWindow: 1\n    }\n  };\n\n  return academy.addAgent(agentConfig);\n};\n\nexport const createNeuralAgentFromModel = (academy, model) => {\n  const modelFitConfig = {\n    epochs: 1,\n    stepsPerEpoch: 16\n  };\n\n  const newModel = new Model({\n    name: rng.uuid4(),\n    layers: [ ...model.layers ]\n  }, modelFitConfig);\n\n  newModel.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\n  newModel.model.setWeights(model.model.getWeights());\n\n  const agentConfig = {\n    model: newModel,\n    agentConfig: {\n      memorySize: 500,\n      batchSize: 128,\n      temporalWindow: 1\n    }\n  };\n\n  return academy.addAgent(agentConfig);\n};\n\nexport const createNewAgentBrain = (academy, network) => {\n  const pTeacher = createTeacher(academy);\n  const agent = createNeuralAgent(academy, network);\n\n  academy.assignTeacherToAgent(agent, pTeacher);\n\n  return [ pTeacher, agent ];\n};\n\nexport const createDerivedAgentBrain = (agentBrain, academy, network) => {\n  const [ , nAgent ] = agentBrain;\n  const oldAgent = academy.agents.get(nAgent);\n  const newAgent = createNeuralAgentFromModel(academy, oldAgent.model.model);\n\n  let pTeacher;\n  academy.teachers.forEach( (t, id) => {\n    if (pTeacher) return;\n\n    if (t.agents.size === 0) {\n      t.currentLessonLength = t.currentLessonLength < 25 ? 0 : t.currentLessonLength - 25;\n      pTeacher = id;\n    }\n  });\n  pTeacher = pTeacher || createTeacher(academy);\n\n  academy.assignTeacherToAgent(newAgent, pTeacher);\n\n  return [ pTeacher, newAgent ];\n};\n\nconst mapAgentActionToInput = (action) => {\n  switch(action) {\n    case AvailableAgentAction.FIND_FOOD:\n      return 0;\n    case AvailableAgentAction.EAT_FOOD:\n      return 1;\n    case AvailableAgentAction.WAIT:\n      return 2;\n    case AvailableAgentAction.THINKING:\n      return 4;\n    case AvailableAgentAction.LAY_EGG:\n      return 5;\n    case AvailableAgentAction.FERTILIZE_EGG:\n      return 6;\n    default:\n      return -1;\n  }\n};\n\nexport const worldStateToInputs = (world, config) => {\n  const MAX_AGENTS = config.world.maxAgents;\n  const MAX_FOOD = config.world.maxFood;\n\n  const agentPosList = [];\n  const agentActionList = [];\n  const agentActionTargetList = [];\n  const agentSpeedList = [];\n\n  for (let i = 0; i < MAX_AGENTS; i++) {\n    const foundAgent = world.agents[i];\n\n    if (foundAgent) {\n      agentPosList.push(foundAgent.position.x);\n      agentPosList.push(foundAgent.position.y);\n      agentActionList.push(mapAgentActionToInput(foundAgent.attemptedAction.type));\n\n      if (foundAgent.attemptedAction.targetPosition) {\n        agentActionTargetList.push(foundAgent.attemptedAction.targetPosition.x);\n        agentActionTargetList.push(foundAgent.attemptedAction.targetPosition.y);\n      } else {\n        agentActionTargetList.push(null);\n        agentActionTargetList.push(null);\n      }\n\n      agentSpeedList.push(foundAgent.speed);\n    } else {\n      agentPosList.push(null);\n      agentPosList.push(null);\n      agentActionList.push(null);\n      agentActionTargetList.push(null);\n      agentActionTargetList.push(null);\n      agentSpeedList.push(null);\n    }\n  }\n\n  const foodPosList = [];\n\n  for (let i = 0; i < MAX_FOOD; i++) {\n    if (world.food[i]) {\n      foodPosList.push(world.food[i].position.x);\n      foodPosList.push(world.food[i].position.y);\n    } else {\n      foodPosList.push(null);\n      foodPosList.push(null);\n    }\n  }\n\n  return [ ...agentPosList, ...agentActionList, ...agentActionTargetList, ...agentSpeedList, ...foodPosList ];\n};\n","import { worldStateToInputs } from './AgentBrain';\n\nconst AcademyQueueState = {\n  READY: 'READY',\n  PROCESSING: 'PROCESSING',\n  ERROR: 'ERROR',\n};\n\nexport class AcademyQueue {\n  constructor(academy) {\n    this.academy = academy;\n    this.agentQueue = new Set();\n    this.state = AcademyQueueState.READY;\n    this.IsAcademyLearning = false;\n  }\n\n  queueAgent(agentId) {\n    this.agentQueue.add(agentId);\n  }\n\n  isAcademyLearning() {\n    let isLearning = false;\n\n    this.academy.teachers.forEach( teacher => {\n      if (teacher.State > 0) {\n        isLearning = true;\n      }\n    });\n\n    this.IsAcademyLearning = isLearning;\n\n    return isLearning;\n  }\n\n  process(worldState, configState, onComplete, onError) {\n    if (this.state === AcademyQueueState.READY) {\n      const agentIterator = this.agentQueue.values();\n      const nextAgent = agentIterator.next().value;\n      const agent = worldState.agents.find( a => a.id === nextAgent );\n\n      if (!agent) {\n        this.agentQueue.delete(nextAgent);\n        return;\n      }\n\n      if (agent.attemptedAction.type !== 'THINKING') {\n        console.log('processing for agent who is: ', agent.attemptedAction.type);\n      }\n\n      if (this.isAcademyLearning()) {\n        return;\n      }\n\n      this.state = AcademyQueueState.PROCESSING;\n\n      const [ teacher, nAgent ] = agent.brain;\n      const inputs = worldStateToInputs(worldState, configState);\n\n      this.academy.step({\n        teacherName: teacher,\n        agentsInput: inputs\n      }).then( output => {\n        const guess = output.get(nAgent);\n\n        let guessSuccess;\n\n        if (guess === configState.world.maxFood) {\n          this.academy.addRewardToAgent(nAgent, 0.1);\n          guessSuccess = true;\n        } else if (worldState.food[guess] && !worldState.food[guess].isEaten) {\n          this.academy.addRewardToAgent(nAgent, 0.75);\n          guessSuccess = true;\n        } else {\n          this.academy.addRewardToAgent(nAgent, -0.75);\n          guessSuccess = false;\n        }\n\n        onComplete(agent, guess, guessSuccess);\n\n        this.agentQueue.delete(nextAgent);\n        this.state = AcademyQueueState.READY;\n      }).catch( err => {\n        console.error(err);\n        onError(err);\n        this.state = AcademyQueueState.ERROR;\n      });\n    }\n  }\n}\n","import { createContext, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Academy } from 'reimprovejs/dist/reimprove';\n\nimport { useAppReducer } from '../reducers/AppReducer';\nimport { useConfigReducer } from '../reducers/ConfigReducer';\nimport { useWorldReducer } from '../reducers/WorldReducer';\nimport { createNetwork } from '../helpers/AgentBrain';\nimport { AcademyQueue } from '../helpers/AcademyQueue';\n\nexport const AppContext = createContext()\n\nexport const AppContextProvider = ({ children }) => {\n  const [ config, configDispatch ] = useConfigReducer();\n  const [ academy ] = useState(new Academy());\n  const [ network ] = useState(\n    createNetwork(config.world.maxAgents, config.world.maxFood)\n  );\n  const [ academyQueue ] = useState(new AcademyQueue(academy));\n\n  const ctxServices = {\n    appReducer: useAppReducer(),\n    configReducer: [ config, configDispatch ],\n    worldReducer: useWorldReducer(),\n    neuralAcademy: academy,\n    neuralNetwork: network,\n    academyQueue: academyQueue,\n  };\n\n  return (\n    <AppContext.Provider value={ctxServices}>\n      { children }\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = () => useContext(AppContext);\n\nAppContextProvider.propTypes = {\n  children: PropTypes.element,\n};\n","import { AvailableAgentAction } from '../helpers/AgentFactory';\n\nexport const Agent = ({ agent }) => {\n  const styles = {\n    opacity: 0.7\n  };\n\n  const onAgentClick = (event) => {\n    event.preventDefault();\n\n    console.log(agent);\n  };\n\n  return (\n    <>\n      <circle\n        onClick={onAgentClick}\n        style={styles}\n        cx={agent.position.x}\n        cy={agent.position.y}\n        r={agent.radius}\n        fill={agent.color}\n        stroke={agent.isMutant ? \"#3F3\" : \"#333\"}\n        strokeWidth={agent.attemptedAction.type === AvailableAgentAction.WANDER ? '3px' : '1px'}\n      />\n      <text x={agent.position.x} y={agent.position.y}>{agent.numEaten}</text>\n      <text x={agent.position.x} y={agent.position.y + 15}>{agent.generation}</text>\n    </>\n  );\n};\n","export const Food = ({ food }) => {\n  const calcPoints = () => {\n    const { position, radius } = food;\n    const points = [];\n\n    for (let i = 0; i < 6; i++) {\n      points.push([\n        position.x + (radius * Math.cos(2 * Math.PI * i / 6)),\n        position.y + (radius * Math.sin(2 * Math.PI * i / 6))\n      ]);\n    }\n\n    return points.map( ([x, y]) => `${x},${y}` ).reduce( (acc, val) => `${acc} ${val}` );\n  };\n\n  const styles = {\n    fill: '#FFF',\n    stroke: '#000',\n  };\n\n  return (\n    <polygon style={styles} points={calcPoints()}></polygon>\n  );\n};\n","export const Egg = ({ egg }) => {\n  const calcPoints = () => {\n    const { position, radius = 5 } = egg;\n    const points = [];\n\n    for (let i = 0; i < 4; i++) {\n      points.push([\n        position.x + (radius * Math.cos(2 * Math.PI * i / 4)),\n        position.y + (radius * Math.sin(2 * Math.PI * i / 4))\n      ]);\n    }\n\n    return points.map( ([x, y]) => `${x},${y}` ).reduce( (acc, val) => `${acc} ${val}` );\n  };\n\n  const styles = {\n    fill: egg.color,\n    stroke: egg.parents.length === 2 ? '#F00' : '#000',\n  };\n\n  return (\n    <polygon style={styles} points={calcPoints()}></polygon>\n  );\n};\n","import { useAppContext } from '../context/AppContext';\nimport { Agent } from '../components/Agent';\nimport { Food } from '../components/Food';\nimport { Egg } from '../components/Egg';\n\nexport const WorldContainer = () => {\n  const ctx = useAppContext();\n  const [ config ] = ctx.configReducer;\n  const [ world ] = ctx.worldReducer;\n\n  const styles = {\n    backgroundColor: '#DDD',\n  };\n\n  const wrapStyles = {\n    width: '100%',\n  };\n\n  return (\n    <div style={wrapStyles}>\n      <svg width={config.world.width} height={config.world.height} style={styles}>\n        { world.food.map( (f, i) => (\n          <Food key={`f-${i}`} food={f} />\n        )) }\n\n        { world.eggs.map( (e, i) => (\n          <Egg key={`e-${i}`} egg={e} />\n        )) }\n\n        { world.agents.map( (a, i) => (\n          <Agent key={`a-${i}`} agent={a} />\n        )) }\n      </svg>\n    </div>\n  );\n};\n","import * as Victor from 'victor';\nimport { Random } from 'random-js'\n\nconst rng = new Random(Random.browserCrypto);\n\nconst getRandomPosition = (width, height) => {\n  const PAD = 50;\n\n  return new Victor(\n    rng.integer(PAD, width - PAD),\n    rng.integer(PAD, height - PAD)\n  );\n};\n\nexport const createRandomFood = (\n  worldWidth,\n  worldHeight,\n  radius\n) => ({\n  id: rng.uuid4(),\n  position: getRandomPosition(worldWidth, worldHeight),\n  radius: radius,\n  isEaten: false,\n});\n","import * as Victor from 'victor';\n\nimport { WorldAction } from '../reducers/WorldReducer';\nimport {\n  AvailableAgentAction,\n  createRandomAgent,\n  createEgg,\n  hatchEgg,\n  getRandomPosition\n} from '../helpers/AgentFactory';\nimport { createRandomFood } from '../helpers/FoodFactory';\nimport { findFood } from '../helpers/AgentDecisions';\n\nexport const createAgent = (config, academy, network, dispatcher) => {\n  const newAgent = createRandomAgent(\n    config,\n    academy,\n    network\n  );\n\n  dispatcher({ type: WorldAction.ADD_AGENT, payload: newAgent });\n};\n\nexport const createFood = (config, dispatcher) => {\n  const newFood = createRandomFood(\n    config.world.width,\n    config.world.height,\n    config.food.radius,\n  );\n\n  dispatcher({ type: WorldAction.ADD_FOOD, payload: newFood });\n};\n\nconst eatFood = (agent, world, academy, dispatcher) => {\n  const targetFood = world.food.find(f => f.id === agent.attemptedAction.target);\n\n  if (targetFood && !targetFood.isEaten) {\n    const [ , nAgent ] = agent.brain;\n\n    academy.addRewardToAgent(nAgent, 1);\n\n    dispatcher({\n      type: WorldAction.EAT_FOOD,\n      payload: targetFood,\n    });\n  }\n\n  return {\n    //...agent,\n    id: agent.id,\n    hasLaidEgg: false,\n    attemptedAction: { type: AvailableAgentAction.WAIT }\n  };\n};\n\nconst layEgg = (agent, dispatcher) => {\n  const newEgg = createEgg(agent);\n\n  dispatcher({ type: WorldAction.ADD_EGG, payload: newEgg });\n\n  return {\n    //...agent,\n    id: agent.id,\n    hasLaidEgg: true,\n    attemptedAction: {\n      type: AvailableAgentAction.WAIT\n    }\n  };\n};\n\nconst fertilizeEgg = (agent, world, dispatcher) => {\n  const targetEgg = world.eggs.find(e => e.id === agent.attemptedAction.target);\n\n  if (!targetEgg || targetEgg.parents.length === 2) {\n    return {\n      //...agent,\n      id: agent.id,\n      attemptedAction: {\n        type: AvailableAgentAction.WAIT\n      }\n    };\n  }\n\n  const distanceToTarget = targetEgg.position.distance(agent.position);\n\n  if (distanceToTarget <= agent.speed) {\n    dispatcher({ type: WorldAction.FERTILIZE_EGG, payload: { targetEgg, agent } });\n\n    return {\n      //...agent,\n      id: agent.id,\n      position: targetEgg.position.clone(),\n      hasLaidEgg: true,\n      attemptedAction: {\n        type: AvailableAgentAction.WAIT\n      }\n    };\n  }\n\n  const diffVector = targetEgg.position.clone().subtract(agent.position.clone());\n  const diffAngle = diffVector.angle();\n  const newPosition = new Victor(\n    agent.position.x + (agent.speed * Math.cos(diffAngle)),\n    agent.position.y + (agent.speed * Math.sin(diffAngle))\n  );\n\n  return {\n    //...agent,\n    id: agent.id,\n    position: newPosition\n  };\n};\n\nconst tickFood = (world, config, dispatcher) => {\n  if (world.tick % config.food.spawnEvery === 0) {\n    let spawnAmount = config.food.spawnAmount;\n\n    if (spawnAmount + world.food.length > config.world.maxFood) {\n      spawnAmount = config.world.maxFood - world.food.length;\n    }\n\n    for (let i = 0; i < spawnAmount; i++) {\n      createFood(config, dispatcher);\n    }\n  }\n};\n\nconst tickEggs = (world, config, academy, network, dispatcher) => {\n  const fertilizedEggs = world.eggs.filter( e => e.parents.length === 2 );\n\n  fertilizedEggs.forEach( (egg) => {\n    if (world.agents.length < config.world.maxAgents) {\n      const newAgent = hatchEgg(\n        egg,\n        config,\n        academy,\n        network\n      );\n\n      dispatcher({ type: WorldAction.ADD_AGENT, payload: newAgent });\n    }\n\n    dispatcher({ type: WorldAction.REMOVE_EGG, payload: egg });\n  });\n\n};\n\nexport const tickDeath = (world, config, academy, dispatcher) => {\n  const newAgents = world.agents.map( agent => {\n    const newTicksAlive = agent.ticksAlive + 1;\n\n    if (newTicksAlive > agent.lifeSpan * 1000) {\n      const [ teacher, nAgent ] = agent.brain;\n      const academyTeacher = academy.teachers.get(teacher);\n      const academyAgent = academy.agents.get(nAgent);\n\n      academyTeacher.removeStudent(academyAgent);\n\n      return false;\n    }\n\n    return {\n      ...agent,\n      ticksAlive: newTicksAlive\n    };\n  }).filter(Boolean);\n\n  dispatcher({ type: WorldAction.REPLACE_AGENTS, payload: newAgents });\n};\n\nconst agentWait = (agent, world, config) => {\n  if (\n    agent.numEaten !== 0 &&\n    agent.numEaten % agent.foodForEgg === 0 &&\n    !agent.hasLaidEgg\n  ) {\n    const fertilizableEggs = world.eggs.filter( egg => {\n      return egg.parents.length === 1 && egg.parents[0].id !== agent.id;\n    });\n\n    return fertilizableEggs.length > 0 ? {\n      //...agent,\n      id: agent.id,\n      attemptedAction: {\n        type: AvailableAgentAction.FERTILIZE_EGG,\n        target: fertilizableEggs[0].id\n      }\n    } : {\n      //...agent,\n      id: agent.id,\n      attemptedAction: {\n        type: AvailableAgentAction.LAY_EGG\n      }\n    }\n  }\n\n  return world.food.length > 0 ? {\n    //...agent,\n    id: agent.id,\n    attemptedAction: {\n      type: AvailableAgentAction.THINKING\n    }\n  } : {\n    id: agent.id,\n    attemptedAction: {\n      type: AvailableAgentAction.WANDER,\n      targetPosition: getRandomPosition(config.world.width, config.world.height),\n    }\n  };\n};\n\nconst agentWander = (agent) => {\n  const targetPosition = agent.attemptedAction.targetPosition.clone();\n  const distanceToTarget = targetPosition.distance(agent.position);\n\n  if (distanceToTarget <= agent.speed) {\n    return {\n      id: agent.id,\n      position: targetPosition,\n      attemptedAction: {\n        type: AvailableAgentAction.WAIT\n      }\n    };\n  }\n\n  const diffVector = targetPosition.clone().subtract(agent.position.clone());\n  const diffAngle = diffVector.angle();\n  const newPosition = new Victor(\n    agent.position.x + (agent.speed * Math.cos(diffAngle)),\n    agent.position.y + (agent.speed * Math.sin(diffAngle))\n  );\n\n  return {\n    id: agent.id,\n    position: newPosition\n  }\n};\n\nconst tickAgentActions = (world, config, academy, academyQueue, dispatcher) => {\n  const updatedAgents = world.agents.map( agent => {\n    switch (agent.attemptedAction.type) {\n\n      case AvailableAgentAction.THINKING:\n        academyQueue.queueAgent(agent.id);\n        return null;\n\n      case AvailableAgentAction.FIND_FOOD:\n        return findFood(agent, world, academy);\n      case AvailableAgentAction.EAT_FOOD:\n        return eatFood(agent, world, academy, dispatcher);\n      case AvailableAgentAction.LAY_EGG:\n        return layEgg(agent, dispatcher);\n      case AvailableAgentAction.FERTILIZE_EGG:\n        return fertilizeEgg(agent, world, dispatcher);\n      case AvailableAgentAction.WAIT:\n        return agentWait(agent, world, config);\n      case AvailableAgentAction.WANDER:\n        return agentWander(agent);\n      default:\n        return null;\n    }\n  }).filter(Boolean);\n\n  dispatcher({ type: WorldAction.LAZY_UPDATE_AGENTS, payload: updatedAgents });\n};\n\nconst tickAcademyQueue = (world, config, academyQueue, dispatcher) => {\n  academyQueue.process(\n    world,\n    config,\n    (agent, guess, guessSuccess) => {\n      if (guessSuccess) {\n        const newAction = guess === config.world.maxFood ? {\n          id: agent.id,\n          attemptedAction: {\n            type: AvailableAgentAction.WANDER,\n            targetPosition: getRandomPosition(config.world.width, config.world.height),\n          }\n        } : {\n          id: agent.id,\n          attemptedAction: {\n            type: AvailableAgentAction.FIND_FOOD,\n            target: world.food[guess].id,\n            targetPosition: world.food[guess].position.clone()\n          }\n        };\n\n        dispatcher({\n          type: WorldAction.LAZY_UPDATE_AGENTS,\n          payload: [newAction],\n        });\n      } else {\n        dispatcher({\n          type: AvailableAgentAction.LAZY_UPDATE_AGENTS,\n          payload: [{\n            //...agent,\n            id: agent.id,\n            attemptedAction: {\n              type: WorldAction.WAIT,\n            }\n          }]\n        });\n      }\n    },\n    (error) => {\n      dispatcher({ type: WorldAction.TOGGLE_RUNNING, payload: false });\n    }\n  );\n};\n\nexport const tick = (world, config, academy, network, academyQueue, dispatcher) => {\n  //tickAgents(world, config, academy, dispatcher);\n  tickDeath(world, config, academy, dispatcher);\n  tickAgentActions(world, config, academy, academyQueue, dispatcher);\n  tickAcademyQueue(world, config, academyQueue, dispatcher);\n  tickFood(world, config, dispatcher);\n  tickEggs(world, config, academy, network, dispatcher);\n};\n\n","import * as Victor from 'victor';\n\nimport { AvailableAgentAction } from './AgentFactory';\nexport const findFood = (agent, world, academy) => {\n  const targetFood = world.food.find(f => f.id === agent.attemptedAction.target);\n\n  if (!targetFood || targetFood.isEaten) {\n    const [ , nAgent ] = agent.brain;\n\n    academy.addRewardToAgent(nAgent, -1);\n\n    return {\n      //...agent,\n      id: agent.id,\n      attemptedAction: {\n        type: AvailableAgentAction.WAIT\n      }\n    };\n  }\n\n  const distanceToTarget = targetFood.position.distance(agent.position);\n\n  if (distanceToTarget <= agent.speed) {\n    return {\n      //...agent,\n      id: agent.id,\n      position: targetFood.position.clone(),\n      numEaten: agent.numEaten + 1,\n      attemptedAction: {\n        type: AvailableAgentAction.EAT_FOOD,\n        target: targetFood.id,\n        targetPosition: targetFood.position\n      }\n    };\n  }\n\n  const diffVector = targetFood.position.clone().subtract(agent.position.clone());\n  const diffAngle = diffVector.angle();\n  const newPosition = new Victor(\n    agent.position.x + (agent.speed * Math.cos(diffAngle)),\n    agent.position.y + (agent.speed * Math.sin(diffAngle))\n  );\n\n  return {\n    //...agent,\n    id: agent.id,\n    position: newPosition\n  };\n};\n","import { useState } from 'react';\n\nimport { useAppContext } from '../context/AppContext';\nimport { updateConfig } from '../actions/ConfigActions';\nimport { WorldAction } from '../reducers/WorldReducer';\nimport { createAgent } from '../actions/WorldActions';\n\nexport const ConfigContainer = () => {\n  const ctx = useAppContext();\n\n  const { neuralAcademy, neuralNetwork } = ctx;\n  const [ config, configDispatch ] = ctx.configReducer;\n  const [ world, worldDispatch ] = ctx.worldReducer;\n\n  const [ width, setWidth ] = useState(config.world.width);\n  const [ height, setHeight ] = useState(config.world.height);\n  const [ tickInterval, setTickInterval ] = useState(config.world.tickInterval);\n\n  const [ initAgents, setInitAgents ] = useState(config.agents.initNum);\n  const [ agentRadius, setAgentRadius ] = useState(config.agents.radius);\n  const [ agentMinSpeed, setAgentMinSpeed ] = useState(config.agents.minSpeed);\n  const [ agentMaxSpeed, setAgentMaxSpeed ] = useState(config.agents.maxSpeed);\n  const [ agentMinFoodForEgg, setAgentMinFoodForEgg] = useState(config.agents.minFoodForEgg);\n  const [ agentMaxFoodForEgg, setAgentMaxFoodForEgg] = useState(config.agents.maxFoodForEgg);\n  const [ agentMinLifespan, setAgentMinLifespan ] = useState(config.agents.minLifeSpan);\n  const [ agentMaxLifespan, setAgentMaxLifespan ] = useState(config.agents.maxLifeSpan);\n  const [ agentMutationChance, setAgentMutationChance ] = useState(config.agents.mutationChance);\n\n  const [ initFood, setInitFood ] = useState(config.food.initNum);\n  const [ foodRadius, setFoodRadius ] = useState(config.food.radius);\n  const [ foodSpawnEvery, setFoodSpawnEvery ] = useState(config.food.spawnEvery);\n  const [ foodSpawnAmount, setFoodSpawnAmount ] = useState(config.food.spawnAmount);\n\n  const wrapperStyles = {\n    backgroundColor: '#DDD',\n    padding: '5px',\n  };\n\n  const rowStyles = {\n    width: '900px',\n  };\n\n  const itemStyles = {\n    margin: '10px auto',\n  };\n\n  const onUpdateClick = (event) => {\n    event.preventDefault();\n\n    const world = {\n      width: parseInt(width),\n      height: parseInt(height),\n      tickInterval: parseFloat(tickInterval, 10)\n    };\n\n    const agents = {\n      initNum: parseInt(initAgents),\n      radius: parseInt(agentRadius),\n      minSpeed: parseInt(agentMinSpeed),\n      maxSpeed: parseInt(agentMaxSpeed),\n      minFoodForEgg: parseInt(agentMinFoodForEgg),\n      maxFoodForEgg: parseInt(agentMaxFoodForEgg),\n      minLifeSpan: parseFloat(agentMinLifespan, 10),\n      maxLifeSpan: parseFloat(agentMaxLifespan, 10),\n      mutationChance: parseFloat(agentMutationChance, 10),\n    };\n\n    const food = {\n      initNum: parseInt(initFood),\n      radius: parseInt(foodRadius),\n      spawnEvery: parseInt(foodSpawnEvery),\n      spawnAmount: parseInt(foodSpawnAmount)\n    };\n\n    updateConfig(\n      world,\n      agents,\n      food,\n      { configDispatch, worldDispatch }\n    );\n  };\n\n  const toggleRunning = (event) => {\n    event.preventDefault();\n\n    worldDispatch({ type: WorldAction.TOGGLE_RUNNING });\n  };\n\n  const onNextTick = (event) => {\n    event.preventDefault();\n\n    worldDispatch({ type: WorldAction.TICK });\n  };\n\n  const onNewBloodClick = (event) => {\n    event.preventDefault();\n\n    createAgent(config, neuralAcademy, neuralNetwork, worldDispatch);\n  };\n\n  return (\n    <div className=\"flex-container-column\" style={wrapperStyles}>\n      <div className=\"flex-item flex-container-row\" style={rowStyles}>\n        <div className=\"flex-item flex-container-column\">\n          <div className=\"flex-item\" style={itemStyles}>\n            Width:\n            <input type=\"number\" onChange={ e => setWidth(e.target.value) } value={width} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Height:\n            <input type=\"number\" onChange={ e => setHeight(e.target.value) } value={height} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Tick Interval:\n            <input type=\"number\" onChange={ e => setTickInterval(e.target.value) } value={tickInterval} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Min Food For Egg:\n            <input type=\"number\" onChange={ e => setAgentMinFoodForEgg(e.target.value) } value={agentMinFoodForEgg} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Max Food For Egg:\n            <input type=\"number\" onChange={ e => setAgentMaxFoodForEgg(e.target.value) } value={agentMaxFoodForEgg} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Min Agent Lifespan:\n            <input type=\"number\" onChange={ e => setAgentMinLifespan(e.target.value) } value={agentMinLifespan} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Max Agent Lifespan:\n            <input type=\"number\" onChange={ e => setAgentMaxLifespan(e.target.value) } value={agentMaxLifespan} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Agent Mutation Chance:\n            <input type=\"number\" onChange={ e => setAgentMutationChance(e.target.value) } value={agentMutationChance} />\n          </div>\n        </div>\n        <div className=\"flex-item flex-container-column\">\n          <div className=\"flex-item\" style={itemStyles}>\n            Starting Agents:\n            <input type=\"number\" onChange={ e => setInitAgents(e.target.value) } value={initAgents} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Agent Radius:\n            <input type=\"number\" onChange={ e => setAgentRadius(e.target.value) } value={agentRadius} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Agent Min Speed:\n            <input type=\"number\" onChange={ e => setAgentMinSpeed(e.target.value) } value={agentMinSpeed} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Agent Max Speed:\n            <input type=\"number\" onChange={ e => setAgentMaxSpeed(e.target.value) } value={agentMaxSpeed} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Starting Food:\n            <input type=\"number\" onChange={ e => setInitFood(e.target.value) } value={initFood} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Food Radius:\n            <input type=\"number\" onChange={ e => setFoodRadius(e.target.value) } value={foodRadius} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Food Spawns Every (ticks):\n            <input type=\"number\" onChange={ e => setFoodSpawnEvery(e.target.value) } value={foodSpawnEvery} />\n          </div>\n          <div className=\"flex-item\" style={itemStyles}>\n            Food Spawn Amount:\n            <input type=\"number\" onChange={ e => setFoodSpawnAmount(e.target.value) } value={foodSpawnAmount} />\n          </div>\n        </div>\n      </div>\n      <div className=\"flex-item flex-container-row\" style={rowStyles}>\n        <button className=\"flex-item\" onClick={onUpdateClick}>NEW</button>\n        <button className=\"flex-item\" onClick={toggleRunning}>\n          { world.isRunning ? 'PAUSE' : 'RESUME' }\n        </button>\n        <button className=\"flex-item\" onClick={onNextTick} disabled={world.isRunning}>\n          STEP NEXT\n        </button>\n        <button className=\"flex-item\" onClick={onNewBloodClick}>\n          NEW BLOOD\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { ConfigAction } from '../reducers/ConfigReducer';\nimport { WorldAction } from '../reducers/WorldReducer';\n\nexport const updateConfig = (world, agents, food, dispatchers) => {\n  const { configDispatch, worldDispatch } = dispatchers;\n\n  worldDispatch({ type: WorldAction.RESET });\n  configDispatch({ type: ConfigAction.UPDATE_WORLD, payload: world });\n  configDispatch({ type: ConfigAction.UPDATE_AGENTS, payload: agents });\n  configDispatch({ type: ConfigAction.UPDATE_FOOD, payload: food });\n};\n","import { useEffect, useState } from 'react';\n\nimport './App.css';\n\nimport { useAppContext } from './context/AppContext';\nimport { WorldContainer } from './containers/WorldContainer';\nimport { ConfigContainer } from './containers/ConfigContainer';\nimport { createAgent, createFood, tick } from './actions/WorldActions';\nimport { WorldAction } from './reducers/WorldReducer';\n\nconst App = () => {\n  const ctx = useAppContext();\n\n  const { neuralAcademy, neuralTeacher, neuralNetwork, academyQueue } = ctx;\n  const [ world, worldDispatch ] = ctx.worldReducer;\n  const [ config ] = ctx.configReducer;\n\n  const [ intervalRef, setIntervalRef ] = useState(null);\n  const [ lastTick, setLastTick ] = useState(world.tick);\n\n  // Initialize the World\n  useEffect( () => {\n    neuralAcademy.teachers.forEach( (teacher) => {\n      neuralAcademy.agents.forEach( (agent) => {\n        teacher.removeStudent(agent);\n      });\n    });\n\n    neuralAcademy.agents.clear();\n\n    for (let i = 0; i < config.agents.initNum; i++) {\n      createAgent(config, neuralAcademy, neuralNetwork, worldDispatch);\n    }\n\n    for (let i = 0; i < config.food.initNum; i++) {\n      createFood(config, worldDispatch);\n    }\n  }, [worldDispatch, config, neuralAcademy, neuralNetwork, neuralTeacher]);\n\n  // SetUp Tick Interval\n  useEffect( () => {\n    const intervalFn = () => {\n      //console.log('interval');\n      worldDispatch({ type: WorldAction.TICK });\n    };\n\n    if (world.isRunning && !intervalRef) {\n      const iRef = setInterval(intervalFn, config.world.tickInterval);\n      setIntervalRef(iRef);\n    } else if(!world.isRunning && intervalRef) {\n      clearInterval(intervalRef);\n      setIntervalRef(null);\n    }\n  }, [\n    config.world.tickInterval,\n    intervalRef,\n    world.isRunning,\n    worldDispatch\n  ])\n\n  // Run Ticks\n  useEffect( () => {\n    let isLearning = false;\n    neuralAcademy.teachers.forEach( t => {\n      if (t.State > 0) isLearning = true;\n    });\n\n    if (world.tick > 0 && lastTick !== world.tick && !isLearning) {\n      tick(world, config, neuralAcademy, neuralNetwork, academyQueue, worldDispatch);\n      setLastTick( world.tick );\n    }\n  }, [world, worldDispatch, lastTick, config, neuralAcademy, neuralTeacher, neuralNetwork, academyQueue])\n\n  return (\n    <div className=\"flex-container-column\">\n      <div className=\"flex-item\"><WorldContainer /></div>\n      <div className=\"flex-item\"><ConfigContainer /></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { AppContextProvider } from './context/AppContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContextProvider>\n      <App />\n    </AppContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}